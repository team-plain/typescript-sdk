/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Datetime = string;
export type Id = string;
export type EmailAddress = string;
export type InternalActor = UserActor | MachineUserActor | SystemActor;
export type CustomerGroupMemberships = CustomerGroupMembership[];
export type Actor = UserActor | MachineUserActor | SystemActor | CustomerActor;
export type EmailActor =
  | UserActor
  | CustomerActor
  | {
      actorType: "supportEmailAddress";
      supportEmailAddress: string;
    }
  | {
      actorType: "deletedCustomer";
      customerId: Id;
    };
export type Component =
  | ComponentText
  | ComponentPlainText
  | ComponentSpacer
  | ComponentDivider
  | ComponentLinkButton
  | ComponentBadge
  | ComponentCopyButton
  | ComponentRow
  | ComponentContainer;
export type ComponentTextSize = "S" | "M" | "L";
export type ComponentTextColor = "NORMAL" | "MUTED" | "SUCCESS" | "WARNING" | "ERROR";
export type ComponentPlainTextSize = "S" | "M" | "L";
export type ComponentPlainTextColor = "NORMAL" | "MUTED" | "SUCCESS" | "WARNING" | "ERROR";
export type ComponentSpacerSize = "XS" | "S" | "M" | "L" | "XL";
export type ComponentDividerSpacingSize = "XS" | "S" | "M" | "L" | "XL";
export type ComponentBadgeColor = "GREY" | "GREEN" | "YELLOW" | "RED" | "BLUE";
export type ComponentRowContent =
  | ComponentText
  | ComponentPlainText
  | ComponentSpacer
  | ComponentDivider
  | ComponentLinkButton
  | ComponentBadge
  | ComponentCopyButton;
export type ComponentContainerContent =
  | ComponentText
  | ComponentPlainText
  | ComponentSpacer
  | ComponentDivider
  | ComponentLinkButton
  | ComponentBadge
  | ComponentCopyButton
  | ComponentRow;
export type CustomerGroupChangedPayload =
  | {
      changeType: "ADDED";
      eventType: "customer.customer_group_changed";
      customerGroup: CustomerGroup;
    }
  | {
      changeType: "UPDATED";
      eventType: "customer.customer_group_changed";
      customerGroup: CustomerGroup;
      previousCustomerGroup: CustomerGroup;
    }
  | {
      changeType: "REMOVED";
      eventType: "customer.customer_group_changed";
      previousCustomerGroup: CustomerGroup;
    };
export type ThreadPriority = number;
export type ThreadStatus = "TODO" | "DONE" | "SNOOZED";
export type ThreadStatusDetail =
  | {
      type: "CREATED";
      createdAt: Datetime;
    }
  | {
      type: "SNOOZED";
      snoozedAt: Datetime;
      snoozedUntil: Datetime;
    }
  | {
      type: "UNSNOOZED";
      snoozedAt: Datetime;
    }
  | {
      type: "NEW_REPLY";
      newReplyAt: Datetime;
    }
  | {
      type: "LINK_LINEAR_UPDATED";
      updatedAt: Datetime;
      linearIssueId: string;
    };
export type ThreadAssignee =
  | User
  | MachineUser
  | {
      id: string;
    };
export type ServiceLevelAgreement =
  | {
      id: Id;
      tier: Tier;
      useBusinessHoursOnly: boolean;
      threadPriorityFilter: ThreadPriorityFilter;
      createdAt: Datetime;
      createdBy: InternalActor;
      updatedAt: Datetime;
      updatedBy: InternalActor;
      type: "FIRST_RESPONSE_TIME";
      firstResponseTimeMinutes: number;
    }
  | {
      id: Id;
      tier: Tier;
      useBusinessHoursOnly: boolean;
      threadPriorityFilter: ThreadPriorityFilter;
      createdAt: Datetime;
      createdBy: InternalActor;
      updatedAt: Datetime;
      updatedBy: InternalActor;
      type: "NEXT_RESPONSE_TIME";
      nextResponseTimeMinutes: number;
    };
/**
 * @minItems 1
 */
export type ThreadPriorityFilter = [ThreadPriority, ...ThreadPriority[]];
export type ServiceLevelAgreementStatusDetail =
  | {
      breachTime: Datetime;
      status: "PENDING";
    }
  | {
      achievedAt: Datetime;
      status: "ACHIEVED";
    }
  | {
      breachTime: Datetime;
      status: "IMMINENT_BREACH";
    }
  | {
      breachedAt: Datetime;
      status: "BREACHING";
    }
  | {
      breachedAt: Datetime;
      completedAt: Datetime;
      status: "BREACHED";
    }
  | {
      cancelledAt: Datetime;
      status: "CANCELLED";
    };

/**
 * Webhook request
 */
export interface WebhooksSchemaDefinition {
  timestamp: Datetime;
  workspaceId: Id;
  payload:
    | CustomerChangedPayload
    | CustomerGroupMembershipsChangedPayload
    | TimelineEntryChangedPayload
    | CustomerGroupChangedPayload
    | ThreadCreatedPublicEventPayload
    | ThreadStatusTransitionedPublicEventPayload
    | ThreadAssignmentTransitionedPublicEventPayload
    | ThreadEmailReceivedPublicEventPayload
    | ThreadEmailSentPublicEventPayload
    | ThreadSlackMessageReceivedEventPayload
    | ThreadSlackMessageSentEventPayload
    | ThreadLabelsChangedPublicEventPayload
    | ThreadPriorityChangedPublicEventPayload
    | ThreadFieldCreatedPublicEventPayload
    | ThreadFieldUpdatedPublicEventPayload
    | ThreadFieldDeletedPublicEventPayload
    | ThreadChatSentPublicEventPayload
    | ThreadServiceLevelAgreementStatusTransitionedPayload
    | CustomerCreatedPublicEventPayload
    | CustomerUpdatedPublicEventPayload
    | CustomerDeletedPublicEventPayload;
  id: Id;
  type:
    | "thread.thread_created"
    | "thread.thread_status_transitioned"
    | "thread.thread_assignment_transitioned"
    | "thread.email_received"
    | "thread.email_sent"
    | "thread.slack_message_received"
    | "thread.slack_message_sent"
    | "thread.chat_sent"
    | "thread.note_created"
    | "thread.thread_labels_changed"
    | "thread.thread_priority_changed"
    | "thread.thread_field_created"
    | "thread.thread_field_updated"
    | "thread.thread_field_deleted"
    | "thread.service_level_agreement_status_transitioned"
    | "customer.customer_created"
    | "customer.customer_updated"
    | "customer.customer_deleted"
    | "customer.customer_changed"
    | "customer.customer_group_changed"
    | "customer.customer_group_memberships_changed"
    | "timeline.timeline_entry_changed";
  webhookMetadata: {
    webhookTargetId: Id;
    webhookDeliveryAttemptId: Id;
    webhookDeliveryAttemptNumber: number;
    webhookDeliveryAttemptTimestamp: Datetime;
  };
}
/**
 * A customer has been created or updated
 */
export interface CustomerChangedPayload {
  changeType: "ADDED" | "UPDATED";
  eventType: "customer.customer_changed";
  customer: Customer;
  previousCustomer: Customer | null;
}
export interface Customer {
  id: Id;
  email: Email;
  externalId: string | null;
  fullName: string;
  shortName: string | null;
  assignedAt: Datetime | null;
  assignedToUser: User | null;
  markedAsSpamAt?: Datetime | null;
  markedAsSpamBy?: InternalActor | null;
  customerGroupMemberships: CustomerGroupMemberships;
  createdAt: Datetime;
  createdBy: Actor;
  updatedAt: Datetime;
  updatedBy: Actor;
}
export interface Email {
  email: EmailAddress;
  isVerified: boolean;
  verifiedAt: Datetime | null;
}
export interface User {
  id: Id;
  email: EmailAddress;
  fullName: string;
  publicName: string;
  status: "ONLINE" | "OFFLINE" | "BREAK";
  statusChangedAt: Datetime;
  createdAt: Datetime;
  createdBy: InternalActor;
  updatedAt: Datetime;
  updatedBy: InternalActor;
  deletedAt: Datetime | null;
  deletedBy: InternalActor | null;
}
export interface UserActor {
  actorType: "user";
  userId: Id;
}
export interface MachineUserActor {
  actorType: "machineUser";
  machineUserId: Id;
}
export interface SystemActor {
  actorType: "system";
  system: string;
}
export interface CustomerGroupMembership {
  customerId: Id;
  customerGroupId: Id;
  workspaceId: Id;
  createdAt: Datetime;
  createdBy: InternalActor;
  updatedAt: Datetime;
  updatedBy: InternalActor;
  customerGroup: CustomerGroup;
}
export interface CustomerGroup {
  id: Id;
  workspaceId: Id;
  name: string;
  key: string;
  color: string;
  createdAt: Datetime;
  createdBy: InternalActor;
  updatedAt: Datetime;
  updatedBy: InternalActor;
}
export interface CustomerActor {
  actorType: "customer";
  customerId: Id;
}
export interface CustomerGroupMembershipsChangedPayload {
  eventType: "customer.customer_group_memberships_changed";
  changeType: "ADDED" | "REMOVED";
  customer: Customer1;
  previousCustomer: Customer1;
}
export interface Customer1 {
  id: Id;
  email: Email;
  externalId: string | null;
  fullName: string;
  shortName: string | null;
  markedAsSpamAt?: Datetime | null;
  markedAsSpamBy?: InternalActor | null;
  customerGroupMemberships: CustomerGroupMemberships;
  createdAt: Datetime;
  createdBy: Actor;
  updatedAt: Datetime;
  updatedBy: Actor;
}
/**
 * A timeline entry has been added, updated or removed
 */
export interface TimelineEntryChangedPayload {
  eventType: "timeline.timeline_entry_changed";
  /**
   * null if changeType=ADDED
   */
  previousTimelineEntry: TimelineEntry | null;
  /**
   * null if changeType=REMOVED
   */
  timelineEntry: TimelineEntry | null;
  changeType: "ADDED" | "UPDATED" | "REMOVED";
}
export interface TimelineEntry {
  id: Id;
  customerId: Id;
  threadId?: Id | null;
  timestamp: Datetime;
  actor: Actor;
  entry: NoteEntry | ChatEntry | EmailEntry | CustomEntry;
}
export interface NoteEntry {
  entryType: "note";
  noteId: Id;
  text: string;
  markdown: string | null;
}
export interface ChatEntry {
  entryType: "chat";
  chatId: Id;
  text: string | null;
  attachments: ChatEntryAttachment[];
  customerReadAt: Datetime | null;
}
export interface ChatEntryAttachment {
  id: Id;
  fileName: string;
  fileSizeBytes: number;
  fileMimeType: string;
  fileExtension: string | null;
  createdAt: Datetime;
  createdBy: Actor;
  updatedAt: Datetime;
  updatedBy: Actor;
  type: "CHAT";
}
export interface EmailEntry {
  entryType: "email";
  emailId: Id;
  to: EmailParticipant;
  from: EmailParticipant;
  additionalRecipients: EmailParticipant[];
  hiddenRecipients: EmailParticipant[];
  subject: string | null;
  textContent: string | null;
  hasMoreTextContent: boolean;
  markdownContent: string | null;
  hasMoreMarkdownContent: boolean;
  authenticity: "PASS" | "FAIL" | "UNKNOWN";
  sentAt: Datetime | null;
  receivedAt: Datetime | null;
  attachments: EmailEntryAttachment[];
  inReplyToEmailId: string | null;
  isStartOfThread: boolean;
}
export interface EmailParticipant {
  email: string;
  name: string | null;
  emailActor: EmailActor | null;
}
export interface EmailEntryAttachment {
  id: Id;
  fileName: string;
  fileSizeBytes: number;
  fileMimeType: string;
  fileExtension: string | null;
  createdAt: Datetime;
  createdBy: Actor;
  updatedAt: Datetime;
  updatedBy: Actor;
  type: "EMAIL";
  emailContentId: string;
}
export interface CustomEntry {
  entryType: "custom";
  externalId: string | null;
  title: string;
  type: string | null;
  /**
   * @minItems 1
   */
  components: [Component, ...Component[]];
  attachments: CustomEntryAttachment[];
}
export interface ComponentText {
  type: "text";
  textSize: ComponentTextSize | null;
  textColor: ComponentTextColor | null;
  text: string;
}
export interface ComponentPlainText {
  plainTextSize: ComponentPlainTextSize | null;
  plainTextColor: ComponentPlainTextColor | null;
  plainText: string;
  type: "plainText";
}
export interface ComponentSpacer {
  spacerSize: ComponentSpacerSize;
  type: "spacer";
}
export interface ComponentDivider {
  dividerSpacingSize: ComponentDividerSpacingSize | null;
  type: "divider";
}
export interface ComponentLinkButton {
  linkButtonUrl: string;
  linkButtonLabel: string;
  type: "linkButton";
}
export interface ComponentBadge {
  badgeLabel: string;
  badgeColor: ComponentBadgeColor | null;
  type: "badge";
}
export interface ComponentCopyButton {
  copyButtonValue: string;
  copyButtonTooltipLabel: string | null;
  type: "copyButton";
}
export interface ComponentRow {
  type: "row";
  /**
   * @minItems 1
   */
  rowMainContent: [ComponentRowContent, ...ComponentRowContent[]];
  rowAsideContent: ComponentRowContent[];
}
export interface ComponentContainer {
  type: "container";
  /**
   * @minItems 1
   */
  containerContent: [ComponentContainerContent, ...ComponentContainerContent[]];
}
export interface CustomEntryAttachment {
  id: Id;
  fileName: string;
  fileSizeBytes: number;
  fileMimeType: string;
  fileExtension: string | null;
  createdAt: Datetime;
  createdBy: Actor;
  updatedAt: Datetime;
  updatedBy: Actor;
  type: "CUSTOM_TIMELINE_ENTRY";
}
export interface ThreadCreatedPublicEventPayload {
  eventType: "thread.thread_created";
  thread: Thread;
}
export interface Thread {
  id: Id;
  customer: Customer1;
  title: string;
  previewText?: string | null;
  priority: ThreadPriority;
  externalId: string | null;
  status: ThreadStatus;
  statusChangedAt: Datetime | null;
  statusChangedBy?: Actor | null;
  statusDetail: ThreadStatusDetail | null;
  assignee: ThreadAssignee | null;
  assignedAt: Datetime | null;
  labels: Label[];
  firstInboundMessageInfo: ThreadMessageInfo | null;
  firstOutboundMessageInfo: ThreadMessageInfo | null;
  lastInboundMessageInfo: ThreadMessageInfo | null;
  lastOutboundMessageInfo: ThreadMessageInfo | null;
  supportEmailAddresses: string[];
  createdAt: Datetime;
  createdBy: Actor;
  updatedAt: Datetime;
  updatedBy: Actor;
}
export interface MachineUser {
  id: Id;
  fullName: string;
  publicName: string;
  description: string | null;
  createdAt: Datetime;
  createdBy: InternalActor;
  updatedAt: Datetime;
  updatedBy: InternalActor;
  deletedAt: Datetime | null;
  deletedBy: InternalActor | null;
}
export interface Label {
  id: Id;
  labelType: LabelType;
  createdAt: Datetime;
  createdBy: Actor;
  updatedAt: Datetime;
  updatedBy: Actor;
}
export interface LabelType {
  id: Id;
  name: string;
  icon?: string | null;
  isArchived?: boolean;
  archivedAt: Datetime | null;
  archivedBy: InternalActor | null;
  createdAt: Datetime;
  createdBy: InternalActor;
  updatedAt: Datetime;
  updatedBy: InternalActor;
}
export interface ThreadMessageInfo {
  timestamp: Datetime;
  messageSource: "CHAT" | "EMAIL" | "API" | "SLACK";
  actorId?: string | null;
  actorType?: ("user" | "machineUser" | "customer" | "system") | null;
}
export interface ThreadStatusTransitionedPublicEventPayload {
  eventType: "thread.thread_status_transitioned";
  previousThread: Thread;
  thread: Thread;
}
export interface ThreadAssignmentTransitionedPublicEventPayload {
  eventType: "thread.thread_assignment_transitioned";
  previousThread: Thread;
  thread: Thread;
}
export interface ThreadEmailReceivedPublicEventPayload {
  eventType: "thread.email_received";
  thread: Thread;
  email: Email1;
}
export interface Email1 {
  timelineEntryId: Id;
  id: Id;
  to: EmailParticipant;
  from: EmailParticipant;
  replyTo: string | null;
  additionalRecipients: EmailParticipant[];
  hiddenRecipients: EmailParticipant[];
  subject: string | null;
  textContent: string | null;
  markdownContent: string | null;
  authenticity: "PASS" | "FAIL" | "UNKNOWN";
  sentAt: Datetime | null;
  receivedAt: Datetime | null;
  attachments: Attachment[];
  inReplyToEmailId: string | null;
  isStartOfThread: boolean;
  createdAt: Datetime;
  createdBy: Actor;
  updatedAt: Datetime;
  updatedBy: Actor;
}
export interface Attachment {
  id: Id;
  fileName: string;
  fileSizeBytes: number;
  fileMimeType: string;
  fileExtension: string | null;
  createdAt: Datetime;
  createdBy: Actor;
  updatedAt: Datetime;
  updatedBy: Actor;
}
export interface ThreadEmailSentPublicEventPayload {
  eventType: "thread.email_sent";
  thread: Thread;
  email: Email1;
}
export interface ThreadSlackMessageReceivedEventPayload {
  eventType: "thread.slack_message_received";
  thread: Thread;
  slackMessage: SlackMessage;
}
export interface SlackMessage {
  timelineEntryId: Id;
  id: Id;
  text: string;
  resolvedText?: string;
  attachments: Attachment[];
  slackChannelId: string;
  slackChannelName: string;
  slackMessageLink: string;
  createdAt: Datetime;
  createdBy: Actor;
  updatedAt: Datetime;
  updatedBy: Actor;
}
export interface ThreadSlackMessageSentEventPayload {
  eventType: "thread.slack_message_sent";
  thread: Thread;
  slackMessage: SlackMessage;
}
export interface ThreadLabelsChangedPublicEventPayload {
  eventType: "thread.thread_labels_changed";
  changeType: "ADDED" | "REMOVED";
  thread: Thread;
  previousThread: Thread;
}
export interface ThreadPriorityChangedPublicEventPayload {
  eventType: "thread.thread_priority_changed";
  previousThread: Thread;
  thread: Thread;
}
export interface ThreadFieldCreatedPublicEventPayload {
  eventType: "thread.thread_field_created";
  thread: Thread;
  threadField: ThreadField;
}
export interface ThreadField {
  id: Id;
  threadId: Id;
  key: string;
  type: "STRING" | "BOOL" | "ENUM";
  stringValue: string | null;
  booleanValue: boolean | null;
  createdAt: Datetime;
  createdBy: InternalActor;
  updatedAt: Datetime;
  updatedBy: InternalActor;
}
export interface ThreadFieldUpdatedPublicEventPayload {
  eventType: "thread.thread_field_updated";
  thread: Thread;
  previousThreadField: ThreadField;
  threadField: ThreadField;
}
export interface ThreadFieldDeletedPublicEventPayload {
  eventType: "thread.thread_field_deleted";
  thread: Thread;
  previousThreadField: ThreadField;
}
export interface ThreadChatSentPublicEventPayload {
  eventType: "thread.chat_sent";
  chat: Chat;
  thread: Thread;
}
export interface Chat {
  timelineEntryId: Id;
  id: Id;
  customerReadAt: Datetime | null;
  text?: string | null;
  attachments: Attachment[];
  createdAt: Datetime;
  createdBy: Actor;
  updatedAt: Datetime;
  updatedBy: Actor;
}
export interface ThreadServiceLevelAgreementStatusTransitionedPayload {
  eventType: "thread.service_level_agreement_status_transitioned";
  thread: Thread;
  serviceLevelAgreement: ServiceLevelAgreement;
  previousServiceLevelAgreementStatusDetail: ServiceLevelAgreementStatusDetail;
  serviceLevelAgreementStatusDetail: ServiceLevelAgreementStatusDetail;
}
export interface Tier {
  id: Id;
  name: string;
  externalId: string | null;
  color: string;
  defaultThreadPriority?: number;
  isDefault: boolean;
  createdAt: Datetime;
  createdBy: InternalActor;
  updatedAt: Datetime;
  updatedBy: InternalActor;
}
/**
 * A customer has been created
 */
export interface CustomerCreatedPublicEventPayload {
  eventType: "customer.customer_created";
  customer: Customer1;
}
/**
 * A customer has been updated
 */
export interface CustomerUpdatedPublicEventPayload {
  eventType: "customer.customer_updated";
  customer: Customer1;
  previousCustomer: Customer1;
}
/**
 * A customer has been deleted
 */
export interface CustomerDeletedPublicEventPayload {
  eventType: "customer.customer_deleted";
  previousCustomer: Customer1;
}
