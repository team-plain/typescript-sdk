// Generated by ts-to-zod
import { z } from 'zod';

export const idSchema = z.string();

export const emailAddressSchema = z.string();

export const datetimeSchema = z.string();

export const userActorSchema = z.object({
  actorType: z.literal('user'),
  userId: idSchema,
});

export const machineUserActorSchema = z.object({
  actorType: z.literal('machineUser'),
  machineUserId: idSchema,
});

export const systemActorSchema = z.object({
  actorType: z.literal('system'),
  system: z.string(),
});

export const customerActorSchema = z.object({
  actorType: z.literal('customer'),
  customerId: idSchema,
});

export const emailActorSchema = z.union([
  userActorSchema,
  customerActorSchema,
  z.object({
    actorType: z.literal('supportEmailAddress'),
    supportEmailAddress: z.string(),
  }),
  z.object({
    actorType: z.literal('deletedCustomer'),
    customerId: idSchema,
  }),
]);

export const componentLinkButtonSchema = z.object({
  linkButtonUrl: z.string(),
  linkButtonLabel: z.string(),
  type: z.literal('linkButton'),
});

export const componentCopyButtonSchema = z.object({
  copyButtonValue: z.string(),
  copyButtonTooltipLabel: z.string().nullable(),
  type: z.literal('copyButton'),
});

export const componentTextSizeSchema = z.union([z.literal('S'), z.literal('M'), z.literal('L')]);

export const componentTextColorSchema = z.union([
  z.literal('NORMAL'),
  z.literal('MUTED'),
  z.literal('SUCCESS'),
  z.literal('WARNING'),
  z.literal('ERROR'),
]);

export const componentPlainTextSizeSchema = z.union([
  z.literal('S'),
  z.literal('M'),
  z.literal('L'),
]);

export const componentPlainTextColorSchema = z.union([
  z.literal('NORMAL'),
  z.literal('MUTED'),
  z.literal('SUCCESS'),
  z.literal('WARNING'),
  z.literal('ERROR'),
]);

export const componentSpacerSizeSchema = z.union([
  z.literal('XS'),
  z.literal('S'),
  z.literal('M'),
  z.literal('L'),
  z.literal('XL'),
]);

export const componentDividerSpacingSizeSchema = z.union([
  z.literal('XS'),
  z.literal('S'),
  z.literal('M'),
  z.literal('L'),
  z.literal('XL'),
]);

export const componentBadgeColorSchema = z.union([
  z.literal('GREY'),
  z.literal('GREEN'),
  z.literal('YELLOW'),
  z.literal('RED'),
  z.literal('BLUE'),
]);

export const threadStatusSchema = z.union([
  z.literal('TODO'),
  z.literal('DONE'),
  z.literal('SNOOZED'),
]);

export const threadStatusDetailSchema = z.union([
  z.object({
    type: z.literal('CREATED'),
    createdAt: z.union([z.string(), z.string(), z.unknown()]),
  }),
  z.object({
    type: z.literal('SNOOZED'),
    snoozedAt: z.union([z.string(), z.string(), z.unknown()]),
    snoozedUntil: z.union([z.string(), z.string(), z.unknown()]),
  }),
  z.object({
    type: z.literal('UNSNOOZED'),
    snoozedAt: z.union([z.string(), z.string(), z.unknown()]),
  }),
  z.object({
    type: z.literal('NEW_REPLY'),
    newReplyAt: z.union([z.string(), z.string(), z.unknown()]),
  }),
  z.object({
    type: z.literal('LINK_LINEAR_UPDATED'),
    updatedAt: z.union([z.string(), z.string(), z.unknown()]),
    linearIssueId: z.string(),
  }),
]);

export const emailSchema = z.object({
  email: emailAddressSchema,
  isVerified: z.boolean(),
  verifiedAt: datetimeSchema.nullable(),
});

export const noteEntrySchema = z.object({
  entryType: z.literal('note'),
  noteId: idSchema,
  text: z.string(),
  markdown: z.string().nullable(),
});

export const emailParticipantSchema = z.object({
  email: z.string(),
  name: z.string().nullable(),
  emailActor: emailActorSchema.nullable(),
});

export const threadMessageInfoSchema = z.object({
  timestamp: z.union([z.string(), z.string(), z.unknown()]),
  messageSource: z.union([
    z.literal('CHAT'),
    z.literal('EMAIL'),
    z.literal('API'),
    z.literal('SLACK'),
  ]),
});

export const internalActorSchema = z.union([
  userActorSchema,
  machineUserActorSchema,
  systemActorSchema,
]);

export const actorSchema = z.union([
  userActorSchema,
  machineUserActorSchema,
  systemActorSchema,
  customerActorSchema,
]);

export const componentTextSchema = z.object({
  type: z.literal('text'),
  textSize: componentTextSizeSchema.nullable(),
  textColor: componentTextColorSchema.nullable(),
  text: z.string(),
});

export const componentPlainTextSchema = z.object({
  plainTextSize: componentPlainTextSizeSchema.nullable(),
  plainTextColor: componentPlainTextColorSchema.nullable(),
  plainText: z.string(),
  type: z.literal('plainText'),
});

export const componentSpacerSchema = z.object({
  spacerSize: componentSpacerSizeSchema,
  type: z.literal('spacer'),
});

export const componentDividerSchema = z.object({
  dividerSpacingSize: componentDividerSpacingSizeSchema.nullable(),
  type: z.literal('divider'),
});

export const componentBadgeSchema = z.object({
  badgeLabel: z.string(),
  badgeColor: componentBadgeColorSchema.nullable(),
  type: z.literal('badge'),
});

export const componentRowContentSchema = z.union([
  componentTextSchema,
  componentPlainTextSchema,
  componentSpacerSchema,
  componentDividerSchema,
  componentLinkButtonSchema,
  componentBadgeSchema,
  componentCopyButtonSchema,
]);

export const customerGroupSchema = z.object({
  id: idSchema,
  workspaceId: idSchema,
  name: z.string(),
  key: z.string(),
  color: z.string(),
  createdAt: datetimeSchema,
  createdBy: internalActorSchema,
  updatedAt: datetimeSchema,
  updatedBy: internalActorSchema,
});

export const userSchema = z.object({
  id: idSchema,
  email: emailAddressSchema,
  fullName: z.string(),
  publicName: z.string(),
  status: z.union([z.literal('ONLINE'), z.literal('OFFLINE'), z.literal('BREAK')]),
  statusChangedAt: datetimeSchema,
  createdAt: datetimeSchema,
  createdBy: internalActorSchema,
  updatedAt: datetimeSchema,
  updatedBy: internalActorSchema,
  deletedAt: datetimeSchema.nullable(),
  deletedBy: internalActorSchema.nullable(),
});

export const machineUserSchema = z.object({
  id: idSchema,
  fullName: z.string(),
  publicName: z.string(),
  description: z.string().nullable(),
  createdAt: datetimeSchema,
  createdBy: internalActorSchema,
  updatedAt: datetimeSchema,
  updatedBy: internalActorSchema,
  deletedAt: datetimeSchema.nullable(),
  deletedBy: internalActorSchema.nullable(),
});

export const chatEntryAttachmentSchema = z.object({
  id: idSchema,
  fileName: z.string(),
  fileSizeBytes: z.number(),
  fileMimeType: z.string(),
  fileExtension: z.string().nullable(),
  createdAt: datetimeSchema,
  createdBy: actorSchema,
  updatedAt: datetimeSchema,
  updatedBy: actorSchema,
  type: z.literal('CHAT'),
});

export const emailEntryAttachmentSchema = z.object({
  id: idSchema,
  fileName: z.string(),
  fileSizeBytes: z.number(),
  fileMimeType: z.string(),
  fileExtension: z.string().nullable(),
  createdAt: datetimeSchema,
  createdBy: actorSchema,
  updatedAt: datetimeSchema,
  updatedBy: actorSchema,
  type: z.literal('EMAIL'),
  emailContentId: z.string(),
});

export const customEntryAttachmentSchema = z.object({
  id: idSchema,
  fileName: z.string(),
  fileSizeBytes: z.number(),
  fileMimeType: z.string(),
  fileExtension: z.string().nullable(),
  createdAt: datetimeSchema,
  createdBy: actorSchema,
  updatedAt: datetimeSchema,
  updatedBy: actorSchema,
  type: z.literal('CUSTOM_TIMELINE_ENTRY'),
});

export const labelTypeSchema = z.object({
  id: idSchema,
  name: z.string(),
  icon: z.string().optional().nullable(),
  isArchived: z.boolean().optional(),
  archivedAt: datetimeSchema.nullable(),
  archivedBy: internalActorSchema.nullable(),
  createdAt: datetimeSchema,
  createdBy: internalActorSchema,
  updatedAt: datetimeSchema,
  updatedBy: internalActorSchema,
});

export const attachmentSchema = z.object({
  id: idSchema,
  fileName: z.string(),
  fileSizeBytes: z.number(),
  fileMimeType: z.string(),
  fileExtension: z.string().nullable(),
  createdAt: datetimeSchema,
  createdBy: actorSchema,
  updatedAt: datetimeSchema,
  updatedBy: actorSchema,
});

export const chatSchema = z.object({
  timelineEntryId: idSchema,
  id: idSchema,
  customerReadAt: datetimeSchema.nullable(),
  text: z.string().optional().nullable(),
  attachments: z.array(attachmentSchema),
  createdAt: datetimeSchema,
  createdBy: actorSchema,
  updatedAt: datetimeSchema,
  updatedBy: actorSchema,
});

export const customerGroupMembershipSchema = z.object({
  customerId: idSchema,
  customerGroupId: idSchema,
  workspaceId: idSchema,
  createdAt: datetimeSchema,
  createdBy: internalActorSchema,
  updatedAt: datetimeSchema,
  updatedBy: internalActorSchema,
  customerGroup: customerGroupSchema,
});

export const componentRowSchema = z.object({
  type: z.literal('row'),
  rowMainContent: z.tuple([componentRowContentSchema, z.any()]),
  rowAsideContent: z.array(componentRowContentSchema),
});

export const componentContainerContentSchema = z.union([
  componentTextSchema,
  componentPlainTextSchema,
  componentSpacerSchema,
  componentDividerSchema,
  componentLinkButtonSchema,
  componentBadgeSchema,
  componentCopyButtonSchema,
  componentRowSchema,
]);

export const customerGroupChangedPayloadSchema = z.union([
  z.object({
    changeType: z.literal('ADDED'),
    eventType: z.literal('customer.customer_group_changed'),
    customerGroup: customerGroupSchema,
  }),
  z.object({
    changeType: z.literal('UPDATED'),
    eventType: z.literal('customer.customer_group_changed'),
    customerGroup: customerGroupSchema,
    previousCustomerGroup: customerGroupSchema,
  }),
  z.object({
    changeType: z.literal('REMOVED'),
    eventType: z.literal('customer.customer_group_changed'),
    previousCustomerGroup: customerGroupSchema,
  }),
]);

export const threadAssigneeSchema = z.union([
  userSchema,
  machineUserSchema,
  z.object({
    id: z.string(),
  }),
]);

export const chatEntrySchema = z.object({
  entryType: z.literal('chat'),
  chatId: idSchema,
  text: z.string().nullable(),
  attachments: z.array(chatEntryAttachmentSchema),
  customerReadAt: datetimeSchema.nullable(),
});

export const emailEntrySchema = z.object({
  entryType: z.literal('email'),
  emailId: idSchema,
  to: emailParticipantSchema,
  from: emailParticipantSchema,
  additionalRecipients: z.array(emailParticipantSchema),
  hiddenRecipients: z.array(emailParticipantSchema),
  subject: z.string().nullable(),
  textContent: z.string().nullable(),
  hasMoreTextContent: z.boolean(),
  markdownContent: z.string().nullable(),
  hasMoreMarkdownContent: z.boolean(),
  authenticity: z.union([z.literal('PASS'), z.literal('FAIL'), z.literal('UNKNOWN')]),
  sentAt: datetimeSchema.nullable(),
  receivedAt: datetimeSchema.nullable(),
  attachments: z.array(emailEntryAttachmentSchema),
  inReplyToEmailId: z.string().nullable(),
  isStartOfThread: z.boolean(),
});

export const labelSchema = z.object({
  id: idSchema,
  labelType: labelTypeSchema,
  createdAt: datetimeSchema,
  createdBy: actorSchema,
  updatedAt: datetimeSchema,
  updatedBy: actorSchema,
});

export const email1Schema = z.object({
  timelineEntryId: idSchema,
  id: idSchema,
  to: emailParticipantSchema,
  from: emailParticipantSchema,
  replyTo: z.string().nullable(),
  additionalRecipients: z.array(emailParticipantSchema),
  hiddenRecipients: z.array(emailParticipantSchema),
  subject: z.string().nullable(),
  textContent: z.string().nullable(),
  markdownContent: z.string().nullable(),
  authenticity: z.union([z.literal('PASS'), z.literal('FAIL'), z.literal('UNKNOWN')]),
  sentAt: datetimeSchema.nullable(),
  receivedAt: datetimeSchema.nullable(),
  attachments: z.array(attachmentSchema),
  inReplyToEmailId: z.string().nullable(),
  createdAt: datetimeSchema,
  createdBy: actorSchema,
  updatedAt: datetimeSchema,
  updatedBy: actorSchema,
});

export const customerGroupMembershipsSchema = z.array(customerGroupMembershipSchema);

export const componentContainerSchema = z.object({
  type: z.literal('container'),
  containerContent: z.tuple([componentContainerContentSchema, z.any()]),
});

export const customerSchema = z.object({
  id: idSchema,
  email: emailSchema,
  externalId: z.string().nullable(),
  fullName: z.string(),
  shortName: z.string().nullable(),
  assignedAt: datetimeSchema.nullable(),
  assignedToUser: userSchema.nullable(),
  markedAsSpamAt: datetimeSchema.optional().nullable(),
  markedAsSpamBy: internalActorSchema.optional().nullable(),
  customerGroupMemberships: customerGroupMembershipsSchema,
  createdAt: datetimeSchema,
  createdBy: actorSchema,
  updatedAt: datetimeSchema,
  updatedBy: actorSchema,
});

export const customer1Schema = z.object({
  id: idSchema,
  email: emailSchema,
  externalId: z.string().nullable(),
  fullName: z.string(),
  shortName: z.string().nullable(),
  markedAsSpamAt: datetimeSchema.optional().nullable(),
  markedAsSpamBy: internalActorSchema.optional().nullable(),
  customerGroupMemberships: customerGroupMembershipsSchema,
  createdAt: datetimeSchema,
  createdBy: actorSchema,
  updatedAt: datetimeSchema,
  updatedBy: actorSchema,
});

export const threadSchema = z.object({
  id: idSchema,
  customer: customer1Schema,
  title: z.string(),
  previewText: z.string().optional().nullable(),
  priority: z.number(),
  externalId: z.string().nullable(),
  status: threadStatusSchema,
  statusChangedAt: datetimeSchema.nullable(),
  statusChangedBy: actorSchema.optional().nullable(),
  statusDetail: threadStatusDetailSchema.nullable(),
  assignee: threadAssigneeSchema.nullable(),
  assignedAt: datetimeSchema.nullable(),
  labels: z.array(labelSchema),
  firstInboundMessageInfo: threadMessageInfoSchema.nullable(),
  firstOutboundMessageInfo: threadMessageInfoSchema.nullable(),
  lastInboundMessageInfo: threadMessageInfoSchema.nullable(),
  lastOutboundMessageInfo: threadMessageInfoSchema.nullable(),
  supportEmailAddresses: z.array(z.string()),
  createdAt: datetimeSchema,
  createdBy: actorSchema,
  updatedAt: datetimeSchema,
  updatedBy: actorSchema,
});

export const componentSchema = z.union([
  componentTextSchema,
  componentPlainTextSchema,
  componentSpacerSchema,
  componentDividerSchema,
  componentLinkButtonSchema,
  componentBadgeSchema,
  componentCopyButtonSchema,
  componentRowSchema,
  componentContainerSchema,
]);

export const customerChangedPayloadSchema = z.object({
  changeType: z.union([z.literal('ADDED'), z.literal('UPDATED')]),
  eventType: z.literal('customer.customer_changed'),
  customer: customerSchema,
  previousCustomer: customerSchema.nullable(),
});

export const customerGroupMembershipsChangedPayloadSchema = z.object({
  eventType: z.literal('customer.customer_group_memberships_changed'),
  changeType: z.union([z.literal('ADDED'), z.literal('REMOVED')]),
  customer: customer1Schema,
  previousCustomer: customer1Schema,
});

export const threadCreatedPublicEventPayloadSchema = z.object({
  eventType: z.literal('thread.thread_created'),
  thread: threadSchema,
});

export const threadStatusTransitionedPublicEventPayloadSchema = z.object({
  eventType: z.literal('thread.thread_status_transitioned'),
  previousThread: threadSchema,
  thread: threadSchema,
});

export const threadAssignmentTransitionedPublicEventPayloadSchema = z.object({
  eventType: z.literal('thread.thread_assignment_transitioned'),
  previousThread: threadSchema,
  thread: threadSchema,
});

export const threadEmailReceivedPublicEventPayloadSchema = z.object({
  eventType: z.literal('thread.email_received'),
  thread: threadSchema,
  email: email1Schema,
});

export const threadEmailSentPublicEventPayloadSchema = z.object({
  eventType: z.literal('thread.email_sent'),
  thread: threadSchema,
  email: email1Schema,
});

export const threadLabelsChangedPublicEventPayloadSchema = z.object({
  eventType: z.literal('thread.thread_labels_changed'),
  changeType: z.union([z.literal('ADDED'), z.literal('REMOVED')]),
  thread: threadSchema,
  previousThread: threadSchema,
});

export const threadPriorityChangedPublicEventPayloadSchema = z.object({
  eventType: z.literal('thread.thread_priority_changed'),
  previousThread: threadSchema,
  thread: threadSchema,
});

export const threadChatSentPublicEventPayloadSchema = z.object({
  eventType: z.literal('thread.chat_sent'),
  chat: chatSchema,
  thread: threadSchema,
});

export const customerCreatedPublicEventPayloadSchema = z.object({
  eventType: z.literal('customer.customer_created'),
  customer: customer1Schema,
});

export const customerUpdatedPublicEventPayloadSchema = z.object({
  eventType: z.literal('customer.customer_updated'),
  customer: customer1Schema,
  previousCustomer: customer1Schema,
});

export const customerDeletedPublicEventPayloadSchema = z.object({
  eventType: z.literal('customer.customer_deleted'),
  previousCustomer: customer1Schema,
});

export const customEntrySchema = z.object({
  entryType: z.literal('custom'),
  externalId: z.string().nullable(),
  title: z.string(),
  type: z.string().nullable(),
  components: z.tuple([componentSchema, z.any()]),
  attachments: z.array(customEntryAttachmentSchema),
});

export const timelineEntrySchema = z.object({
  id: idSchema,
  customerId: idSchema,
  timestamp: datetimeSchema,
  actor: actorSchema,
  entry: z.union([noteEntrySchema, chatEntrySchema, emailEntrySchema, customEntrySchema]),
});

export const timelineEntryChangedPayloadSchema = z.object({
  eventType: z.literal('timeline.timeline_entry_changed'),
  previousTimelineEntry: timelineEntrySchema.nullable(),
  timelineEntry: timelineEntrySchema.nullable(),
  changeType: z.union([z.literal('ADDED'), z.literal('UPDATED'), z.literal('REMOVED')]),
});

export const webhooksSchemaDefinitionSchema = z.object({
  timestamp: z.unknown(),
  workspaceId: idSchema,
  payload: z.union([
    customerChangedPayloadSchema,
    customerGroupMembershipsChangedPayloadSchema,
    timelineEntryChangedPayloadSchema,
    customerGroupChangedPayloadSchema,
    threadCreatedPublicEventPayloadSchema,
    threadStatusTransitionedPublicEventPayloadSchema,
    threadAssignmentTransitionedPublicEventPayloadSchema,
    threadEmailReceivedPublicEventPayloadSchema,
    threadEmailSentPublicEventPayloadSchema,
    threadLabelsChangedPublicEventPayloadSchema,
    threadPriorityChangedPublicEventPayloadSchema,
    threadChatSentPublicEventPayloadSchema,
    customerCreatedPublicEventPayloadSchema,
    customerUpdatedPublicEventPayloadSchema,
    customerDeletedPublicEventPayloadSchema,
  ]),
  id: idSchema,
  type: z.union([
    z.literal('thread.thread_created'),
    z.literal('thread.thread_status_transitioned'),
    z.literal('thread.thread_assignment_transitioned'),
    z.literal('thread.email_received'),
    z.literal('thread.email_sent'),
    z.literal('thread.chat_sent'),
    z.literal('thread.note_created'),
    z.literal('thread.thread_labels_changed'),
    z.literal('thread.thread_priority_changed'),
    z.literal('customer.customer_created'),
    z.literal('customer.customer_updated'),
    z.literal('customer.customer_deleted'),
    z.literal('customer.customer_changed'),
    z.literal('customer.customer_group_changed'),
    z.literal('customer.customer_group_memberships_changed'),
    z.literal('timeline.timeline_entry_changed'),
  ]),
  webhookMetadata: z.object({
    webhookTargetId: idSchema,
    webhookDeliveryAttemptId: idSchema,
    webhookDeliveryAttemptNumber: z.number(),
    webhookDeliveryAttemptTimestamp: datetimeSchema,
  }),
});
